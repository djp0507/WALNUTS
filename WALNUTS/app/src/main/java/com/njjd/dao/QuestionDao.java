package com.njjd.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njjd.domain.QuestionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<QuestionEntity, String> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property QuestionId = new Property(0, String.class, "questionId", true, "QUESTION_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Photo = new Property(3, String.class, "photo", false, "PHOTO");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property FocusNum = new Property(5, String.class, "focusNum", false, "FOCUS_NUM");
        public final static Property AnswerNum = new Property(6, String.class, "answerNum", false, "ANSWER_NUM");
        public final static Property IsFocus = new Property(7, int.class, "isFocus", false, "IS_FOCUS");
        public final static Property DateTime = new Property(8, String.class, "dateTime", false, "DATE_TIME");
    }


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"QUESTION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: questionId
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"PHOTO\" TEXT," + // 3: photo
                "\"PIC\" TEXT," + // 4: pic
                "\"FOCUS_NUM\" TEXT," + // 5: focusNum
                "\"ANSWER_NUM\" TEXT," + // 6: answerNum
                "\"IS_FOCUS\" INTEGER NOT NULL ," + // 7: isFocus
                "\"DATE_TIME\" TEXT);"); // 8: dateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionEntity entity) {
        stmt.clearBindings();
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(1, questionId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String focusNum = entity.getFocusNum();
        if (focusNum != null) {
            stmt.bindString(6, focusNum);
        }
 
        String answerNum = entity.getAnswerNum();
        if (answerNum != null) {
            stmt.bindString(7, answerNum);
        }
        stmt.bindLong(8, entity.getIsFocus());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionEntity entity) {
        stmt.clearBindings();
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(1, questionId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String focusNum = entity.getFocusNum();
        if (focusNum != null) {
            stmt.bindString(6, focusNum);
        }
 
        String answerNum = entity.getAnswerNum();
        if (answerNum != null) {
            stmt.bindString(7, answerNum);
        }
        stmt.bindLong(8, entity.getIsFocus());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public QuestionEntity readEntity(Cursor cursor, int offset) {
        QuestionEntity entity = new QuestionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // questionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // focusNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answerNum
            cursor.getInt(offset + 7), // isFocus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // dateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionEntity entity, int offset) {
        entity.setQuestionId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFocusNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswerNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsFocus(cursor.getInt(offset + 7));
        entity.setDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(QuestionEntity entity, long rowId) {
        return entity.getQuestionId();
    }
    
    @Override
    public String getKey(QuestionEntity entity) {
        if(entity != null) {
            return entity.getQuestionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionEntity entity) {
        return entity.getQuestionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
